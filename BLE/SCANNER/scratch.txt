// from ble_interactive

static void on_ble_evt(uint16_t conn_handle, ble_evt_t const * p_ble_evt)
{
    ret_code_t err_code;
    char       passkey[BLE_GAP_PASSKEY_LEN + 1];
    uint16_t   role = ble_conn_state_role(conn_handle);

    switch (p_ble_evt->header.evt_id)
    {
        case BLE_GAP_EVT_CONNECTED:
        {
            // Store device data to dynamic command buffer and for futher operations.
            m_connected_peers[conn_handle].address =
                p_ble_evt->evt.gap_evt.params.connected.peer_addr;
            connected_to_cmd_add(m_connected_peers, conn_handle);
            // Display device address.
            hex_addr_display(p_ble_evt->evt.gap_evt.params.connected.peer_addr.addr,
                             BLE_GAP_ADDR_LEN);
            // Allocation memory for services data.
            mp_device_srv[conn_handle] = (device_srv_t *)nrf_balloc_alloc(&m_srv_pool);
        }
            break;

        case BLE_GAP_EVT_DISCONNECTED:
            // Clearing device data.
            connected_to_cmd_remove(m_connected_peers, conn_handle);
            memset(&m_connected_peers[conn_handle], 0x00, sizeof(m_connected_peers[0]));
            // Release of allocated memory.
            nrf_balloc_free(&m_srv_pool, mp_device_srv[conn_handle]);
            break;

        case BLE_GAP_EVT_PASSKEY_DISPLAY:
            memcpy(passkey,
                   p_ble_evt->evt.gap_evt.params.passkey_display.passkey,
                   BLE_GAP_PASSKEY_LEN);
            passkey[BLE_GAP_PASSKEY_LEN] = 0x00;
            NRF_LOG_INFO("%s: BLE_GAP_EVT_PASSKEY_DISPLAY: passkey=%s match_req=%d",
                         nrf_log_push(mp_roles_str[role]),
                         nrf_log_push(passkey),
                         p_ble_evt->evt.gap_evt.params.passkey_display.match_request);

            if (p_ble_evt->evt.gap_evt.params.passkey_display.match_request)
            {
                NRF_LOG_INFO("Type /numeric accept/ to confirm, /numeric reject/ to reject");
                m_num_comp_conn_handle    = conn_handle;
                m_numeric_match_requested = true;
            }

            break;

        case BLE_GAP_EVT_AUTH_KEY_REQUEST:
            key_request_set();
            NRF_LOG_DEBUG("%s: BLE_GAP_EVT_AUTH_KEY_REQUEST", nrf_log_push(mp_roles_str[role]));
            break;

        case BLE_GAP_EVT_LESC_DHKEY_REQUEST:
            NRF_LOG_DEBUG("%s: BLE_GAP_EVT_LESC_DHKEY_REQUEST", nrf_log_push(mp_roles_str[role]));
            break;

        case BLE_GAP_EVT_AUTH_STATUS:
            NRF_LOG_INFO(
                "%s: BLE_GAP_EVT_AUTH_STATUS: status=0x%x bond=0x%x lv4: %d",
                nrf_log_push(mp_roles_str[role]),
                p_ble_evt->evt.gap_evt.params.auth_status.auth_status,
                p_ble_evt->evt.gap_evt.params.auth_status.bonded,
                p_ble_evt->evt.gap_evt.params.auth_status.sm1_levels.lv4);
            NRF_LOG_DEBUG("kdist_own:0x%x kdist_peer:0x%x",
                          *( (uint8_t *)&p_ble_evt->evt.gap_evt.params.auth_status.kdist_own),
                          *( (uint8_t *)&p_ble_evt->evt.gap_evt.params.auth_status.kdist_peer));
            break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            ble_gap_evt_t const * p_gap_evt = &p_ble_evt->evt.gap_evt;
            NRF_LOG_RAW_INFO("PHY update request\r\n");
            ble_gap_phys_t phy_param =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_gap_evt->conn_handle, &phy_param);
            APP_ERROR_CHECK(err_code);
        }
        break;

        case BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP:
        {
            on_primary_srv_discovery_rsp(&(p_ble_evt->evt.gattc_evt));
        }
        break;

        case BLE_GATTC_EVT_CHAR_DISC_RSP:
        {
            on_characteristics_discovery_rsp(&(p_ble_evt->evt.gattc_evt));
        }
        break;

        case BLE_GATTC_EVT_DESC_DISC_RSP:
        {
            on_descriptor_discovery_rsp(&(p_ble_evt->evt.gattc_evt));
        }
        break;

        case BLE_GATTC_EVT_READ_RSP:
        {
            on_read_rsp(&(p_ble_evt->evt.gattc_evt));
        }
        break;

        case BLE_GATTC_EVT_WRITE_RSP:
        {
            on_write_rsp(&(p_ble_evt->evt.gattc_evt));
        }
        break;

        case BLE_GATTC_EVT_HVX:
        {
            // If server sends an indication, then send a Handle Value Confirmation to the GATT Server.
            if (p_ble_evt->evt.gattc_evt.params.hvx.type == BLE_GATT_HVX_INDICATION)
            {
                err_code = sd_ble_gattc_hv_confirm(p_ble_evt->evt.gattc_evt.conn_handle,
                                                   p_ble_evt->evt.gattc_evt.params.hvx.handle);
                APP_ERROR_CHECK(err_code);
            }

            uint8_t data_len = p_ble_evt->evt.gattc_evt.params.hvx.len;
            NRF_LOG_RAW_INFO(
                "%s data: ",
                (p_ble_evt->evt.gattc_evt.params.hvx.type !=
                 BLE_GATT_HVX_NOTIFICATION) ? "Indication" : "Notification");

            // Display notifications or indication data.
            for (uint8_t i = 0; i < data_len; i++)
            {
                NRF_LOG_RAW_INFO("%d ", p_ble_evt->evt.gattc_evt.params.hvx.data[i]);
            }

            NRF_LOG_RAW_INFO("\r\n");
        }
        break;

        default:
            // No implementation needed.
            break;
    }
}




/**@brief Function for handling BLE events.
 *
 * @param[in]   p_ble_evt   Bluetooth stack event.
 * @param[in]   p_context   Unused.
 */
static void ble_evt_handler(ble_evt_t const * p_ble_evt, void * p_context)
{
    ret_code_t err_code;

    // For readability.
    ble_gap_evt_t const * p_gap_evt = &p_ble_evt->evt.gap_evt;
    uint16_t evt = p_ble_evt->header.evt_id;
    switch (evt)
    {
        // Upon connection, check which peripheral is connected, initiate DB
        // discovery, update LEDs status, and resume scanning, if necessary.
        case BLE_GAP_EVT_CONNECTED:
        {
            uint16_t handle = p_gap_evt->conn_handle;
            NRF_LOG_INFO("Connection 0x%x established, state %x, starting DB discovery.",
                         handle, state);
            APP_ERROR_CHECK_BOOL(handle < NRF_SDH_BLE_CENTRAL_LINK_COUNT);

            // Update LEDs status and check whether it is needed to look for more
            // peripherals to connect to.
            bsp_board_led_on(CENTRAL_CONNECTED_LED);
            if (ble_conn_state_central_conn_count() == NRF_SDH_BLE_CENTRAL_LINK_COUNT)
            {
                bsp_board_led_off(CENTRAL_SCANNING_LED);
                break;
            }
            // Resume scanning if not connected
            if (state == 0) 
            {
              bsp_board_led_on(CENTRAL_SCANNING_LED);
              scan_start_();
              break;
            }

            err_code = ble_bas_c_handles_assign(&m_bas_c[handle], handle, NULL);
            APP_ERROR_CHECK(err_code);

            err_code = ble_db_discovery_start(&m_db_disc[handle], handle);
            APP_ERROR_CHECK(err_code);


        } break; // BLE_GAP_EVT_CONNECTED

        // Upon disconnection, reset the connection handle of the peer that disconnected, update
        // the LEDs status and start scanning again.
        case BLE_GAP_EVT_DISCONNECTED:
        {
            NRF_LOG_INFO("central link 0x%x disconnected (reason: 0x%x)",
                         p_gap_evt->conn_handle,
                         p_gap_evt->params.disconnected.reason);

            state = 0;

            if (ble_conn_state_central_conn_count() == 0)
            {
                err_code = app_button_disable();
                APP_ERROR_CHECK(err_code);

                // Turn off the LED that indicates the connection.
                bsp_board_led_off(CENTRAL_CONNECTED_LED);
            }

            // Start scanning.
            scan_start_();

            // Turn on the LED for indicating scanning.
            bsp_board_led_on(CENTRAL_SCANNING_LED);

        } break;

        case BLE_GAP_EVT_TIMEOUT:
        {
            // Timeout for scanning is not specified, so only the connection requests can time out.
            if (p_gap_evt->params.timeout.src == BLE_GAP_TIMEOUT_SRC_CONN)
            {
                NRF_LOG_DEBUG("Connection request timed out.");
            }
        } break;

//        case BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST:
//        {
//            NRF_LOG_DEBUG("BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST.");
//            // Accept parameters requested by peer.
//            err_code = sd_ble_gap_conn_param_update(p_gap_evt->conn_handle,
//                                        &p_gap_evt->params.conn_param_update_request.conn_params);
//            APP_ERROR_CHECK(err_code);
//        } break;

        case BLE_GAP_EVT_PHY_UPDATE_REQUEST:
        {
            NRF_LOG_DEBUG("PHY update request.");
            ble_gap_phys_t const phys =
            {
                .rx_phys = BLE_GAP_PHY_AUTO,
                .tx_phys = BLE_GAP_PHY_AUTO,
            };
            err_code = sd_ble_gap_phy_update(p_ble_evt->evt.gap_evt.conn_handle, &phys);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GATTC_EVT_TIMEOUT:
        {
            // Disconnect on GATT client timeout event.
            NRF_LOG_DEBUG("GATT client timeout.");
            state = 0;
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gattc_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
        } break;

        case BLE_GATTS_EVT_TIMEOUT:
        {
            // Disconnect on GATT server timeout event.
            NRF_LOG_DEBUG("GATT server timeout.");
            state = 0;
            err_code = sd_ble_gap_disconnect(p_ble_evt->evt.gatts_evt.conn_handle,
                                             BLE_HCI_REMOTE_USER_TERMINATED_CONNECTION);
            APP_ERROR_CHECK(err_code);
        } break;

        // 29 BLE_GAP_EVT_ADV_REPORT
        case BLE_GAP_EVT_ADV_REPORT:
           //NRF_LOG_DEBUG("BLE_GAP_EVT_ADV_REPORT - got advertisement");
           on_adv_report(&p_gap_evt->params.adv_report);

            break;

        // 30
        case BLE_GAP_EVT_SCAN_REQ_REPORT:
            NRF_LOG_DEBUG("BLE_GAP_EVT_SCAN_REQ_REPORT");
            break;
        // 32
        case BLE_GAP_EVT_PHY_UPDATE:
            NRF_LOG_DEBUG("BLE_GAP_EVT_PHY_UPDATE");
            break;
        // 48
        case BLE_GAP_EVT_ADV_SET_TERMINATED :
            NRF_LOG_DEBUG("BLE_GAP_EVT_ADV_SET_TERMINATED");
            break;

        case BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP:
            NRF_LOG_DEBUG("BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP");
            break;

//    BLE_GATTC_EVT_REL_DISC_RSP,                             /**< Relationship Discovery Response event.             \n See @ref ble_gattc_evt_rel_disc_rsp_t.                */
//    BLE_GATTC_EVT_CHAR_DISC_RSP,                            /**< Characteristic Discovery Response event.           \n See @ref ble_gattc_evt_char_disc_rsp_t.               */
//    BLE_GATTC_EVT_DESC_DISC_RSP,                            /**< Descriptor Discovery Response event.               \n See @ref ble_gattc_evt_desc_disc_rsp_t.               */

        case BLE_GATTC_EVT_REL_DISC_RSP:
            NRF_LOG_DEBUG("BLE_GATTC_EVT_REL_DISC_RSP");
            break;

        case BLE_GATTC_EVT_CHAR_DISC_RSP:
            NRF_LOG_DEBUG("BLE_GATTC_EVT_CHAR_DISC_RSP");
            on_characteristics_discovery_rsp(&(p_ble_evt->evt.gattc_evt));
            break;

        case BLE_GATTC_EVT_DESC_DISC_RSP:
            NRF_LOG_DEBUG("BLE_GATTC_EVT_DESC_DISC_RSP");
            break;

        case BLE_GAP_EVT_AUTH_STATUS:
            NRF_LOG_INFO("BLE_GAP_EVT_AUTH_STATUS");
            if (p_ble_evt->evt.gap_evt.params.auth_status.auth_status == BLE_GAP_SEC_STATUS_SUCCESS)
            {
                NRF_LOG_INFO("Authorization succeeded!");
            }
            else
            {
                NRF_LOG_INFO("Authorization failed with code: %u!",
                             p_ble_evt->evt.gap_evt.params.auth_status.auth_status);
            }
            break;

        case BLE_GAP_EVT_CONN_SEC_UPDATE:
            NRF_LOG_INFO("BLE_GAP_EVT_CONN_SEC_UPDATE");
            NRF_LOG_INFO("Security mode: %u. Security level: %u",
                         p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.sm,
                         p_ble_evt->evt.gap_evt.params.conn_sec_update.conn_sec.sec_mode.lv);
            break;


//        case :
//            NRF_LOG_DEBUG("");
//            break;

//        case :
//            NRF_LOG_DEBUG("");
//            break;

//        case BLE_GAP_EVT_
//            break;

        default:
            NRF_LOG_DEBUG("BLE EVENT id: %d (%x)", evt, evt);

            // No implementation needed.
            break;
    }
}


/**@brief Function for handling Heart Rate Collector events.
 *
 * @param[in] p_hrs_c       Pointer to Heart Rate Client structure.
 * @param[in] p_hrs_c_evt   Pointer to event structure.
 */
static void hrs_c_evt_handler(ble_hrs_c_t * p_hrs_c, ble_hrs_c_evt_t * p_hrs_c_evt)
{
    ret_code_t err_code;

    switch (p_hrs_c_evt->evt_type)
    {
        case BLE_HRS_C_EVT_DISCOVERY_COMPLETE:
            err_code = ble_hrs_c_handles_assign(p_hrs_c ,
                                                p_hrs_c_evt->conn_handle,
                                                &p_hrs_c_evt->params.peer_db);
            APP_ERROR_CHECK(err_code);

            // Initiate bonding.
            err_code = pm_conn_secure(p_hrs_c_evt->conn_handle, false);
            if (err_code != NRF_ERROR_BUSY)
            {
                APP_ERROR_CHECK(err_code);
            }

            NRF_LOG_DEBUG("Heart Rate Service discovered ");
            break;

        case BLE_HRS_C_EVT_HRM_NOTIFICATION:
            NRF_LOG_INFO("Heart Rate = %d", p_hrs_c_evt->params.hrm.hr_value);
            m_hrs_notif_enabled = true;
            break;

        default:
            break;
    }
}


//#define BLE_SVC_BASE           0x60       /**< Common BLE SVC base. */
//#define BLE_SVC_LAST           0x6B       /**< Common BLE SVC last. */
//
//#define BLE_GAP_SVC_BASE       0x6C       /**< GAP BLE SVC base. */
//#define BLE_GAP_SVC_LAST       0x9A       /**< GAP BLE SVC last. */
//
//#define BLE_GATTC_SVC_BASE     0x9B       /**< GATTC BLE SVC base. */
//#define BLE_GATTC_SVC_LAST     0xA7       /**< GATTC BLE SVC last. */
//
//#define BLE_GATTS_SVC_BASE     0xA8       /**< GATTS BLE SVC base. */
//#define BLE_GATTS_SVC_LAST     0xB7       /**< GATTS BLE SVC last. */
//
//#define BLE_L2CAP_SVC_BASE     0xB8       /**< L2CAP BLE SVC base. */
//#define BLE_L2CAP_SVC_LAST     0xBF       /**< L2CAP BLE SVC last. */
//
//
//#define BLE_EVT_INVALID        0x00       /**< Invalid BLE Event. */
//
//#define BLE_EVT_BASE           0x01       /**< Common BLE Event base. */
//#define BLE_EVT_LAST           0x0F       /**< Common BLE Event last. */
//
//#define BLE_GAP_EVT_BASE       0x10       /**< GAP BLE Event base. */
//#define BLE_GAP_EVT_LAST       0x2F       /**< GAP BLE Event last. */
//
//#define BLE_GATTC_EVT_BASE     0x30       /**< GATTC BLE Event base. */
//#define BLE_GATTC_EVT_LAST     0x4F       /**< GATTC BLE Event last. */
//
//#define BLE_GATTS_EVT_BASE     0x50       /**< GATTS BLE Event base. */
//#define BLE_GATTS_EVT_LAST     0x6F       /**< GATTS BLE Event last. */
//
//#define BLE_L2CAP_EVT_BASE     0x70       /**< L2CAP BLE Event base. */
//#define BLE_L2CAP_EVT_LAST     0x8F       /**< L2CAP BLE Event last. */
//
//
//#define BLE_OPT_INVALID        0x00       /**< Invalid BLE Option. */
//
//#define BLE_OPT_BASE           0x01       /**< Common BLE Option base. */
//#define BLE_OPT_LAST           0x1F       /**< Common BLE Option last. */
//
//#define BLE_GAP_OPT_BASE       0x20       /**< GAP BLE Option base. */
//#define BLE_GAP_OPT_LAST       0x3F       /**< GAP BLE Option last. */
//
//#define BLE_GATT_OPT_BASE      0x40       /**< GATT BLE Option base. */
//#define BLE_GATT_OPT_LAST      0x5F       /**< GATT BLE Option last. */
//
//#define BLE_GATTC_OPT_BASE     0x60       /**< GATTC BLE Option base. */
//#define BLE_GATTC_OPT_LAST     0x7F       /**< GATTC BLE Option last. */
//
//#define BLE_GATTS_OPT_BASE     0x80       /**< GATTS BLE Option base. */
//#define BLE_GATTS_OPT_LAST     0x9F       /**< GATTS BLE Option last. */
//
//#define BLE_L2CAP_OPT_BASE     0xA0       /**< L2CAP BLE Option base. */
//#define BLE_L2CAP_OPT_LAST     0xBF       /**< L2CAP BLE Option last. */
//
//
//#define BLE_CFG_INVALID        0x00       /**< Invalid BLE configuration. */
//
//#define BLE_CFG_BASE           0x01       /**< Common BLE configuration base. */
//#define BLE_CFG_LAST           0x1F       /**< Common BLE configuration last. */
//
//#define BLE_CONN_CFG_BASE      0x20       /**< BLE connection configuration base. */
//#define BLE_CONN_CFG_LAST      0x3F       /**< BLE connection configuration last. */
//
//#define BLE_GAP_CFG_BASE       0x40       /**< GAP BLE configuration base. */
//#define BLE_GAP_CFG_LAST       0x5F       /**< GAP BLE configuration last. */
//
//#define BLE_GATT_CFG_BASE      0x60       /**< GATT BLE configuration base. */
//#define BLE_GATT_CFG_LAST      0x7F       /**< GATT BLE configuration last. */
//
//#define BLE_GATTC_CFG_BASE     0x80       /**< GATTC BLE configuration base. */
//#define BLE_GATTC_CFG_LAST     0x9F       /**< GATTC BLE configuration last. */
//
//#define BLE_GATTS_CFG_BASE     0xA0       /**< GATTS BLE configuration base. */
//#define BLE_GATTS_CFG_LAST     0xBF       /**< GATTS BLE configuration last. */
//
//#define BLE_L2CAP_CFG_BASE     0xC0       /**< L2CAP BLE configuration base. */
//#define BLE_L2CAP_CFG_LAST     0xDF       /**< L2CAP BLE configuration last. */



// base is 0x10

//  BLE_GAP_EVT_CONNECTED                   = BLE_GAP_EVT_BASE,       /**< Connected to peer.                              \n See @ref ble_gap_evt_connected_t             */
//  BLE_GAP_EVT_DISCONNECTED                = BLE_GAP_EVT_BASE + 1,   /**< Disconnected from peer.                         \n See @ref ble_gap_evt_disconnected_t.         */
//  BLE_GAP_EVT_CONN_PARAM_UPDATE           = BLE_GAP_EVT_BASE + 2,   /**< Connection Parameters updated.                  \n See @ref ble_gap_evt_conn_param_update_t.    */
//  BLE_GAP_EVT_SEC_PARAMS_REQUEST          = BLE_GAP_EVT_BASE + 3,   /**< Request to provide security parameters.         \n Reply with @ref sd_ble_gap_sec_params_reply.  \n See @ref ble_gap_evt_sec_params_request_t. */
//  BLE_GAP_EVT_SEC_INFO_REQUEST            = BLE_GAP_EVT_BASE + 4,   /**< Request to provide security information.        \n Reply with @ref sd_ble_gap_sec_info_reply.    \n See @ref ble_gap_evt_sec_info_request_t.   */
//  BLE_GAP_EVT_PASSKEY_DISPLAY             = BLE_GAP_EVT_BASE + 5,   /**< Request to display a passkey to the user.       \n In LESC Numeric Comparison, reply with @ref sd_ble_gap_auth_key_reply. \n See @ref ble_gap_evt_passkey_display_t. */
//  BLE_GAP_EVT_KEY_PRESSED                 = BLE_GAP_EVT_BASE + 6,   /**< Notification of a keypress on the remote device.\n See @ref ble_gap_evt_key_pressed_t           */
//  BLE_GAP_EVT_AUTH_KEY_REQUEST            = BLE_GAP_EVT_BASE + 7,   /**< Request to provide an authentication key.       \n Reply with @ref sd_ble_gap_auth_key_reply.    \n See @ref ble_gap_evt_auth_key_request_t.   */
//  BLE_GAP_EVT_LESC_DHKEY_REQUEST          = BLE_GAP_EVT_BASE + 8,   /**< Request to calculate an LE Secure Connections DHKey. \n Reply with @ref sd_ble_gap_lesc_dhkey_reply.  \n See @ref ble_gap_evt_lesc_dhkey_request_t */
//  BLE_GAP_EVT_AUTH_STATUS                 = BLE_GAP_EVT_BASE + 9,   /**< Authentication procedure completed with status. \n See @ref ble_gap_evt_auth_status_t.          */
//  BLE_GAP_EVT_CONN_SEC_UPDATE             = BLE_GAP_EVT_BASE + 10,  /**< Connection security updated.                    \n See @ref ble_gap_evt_conn_sec_update_t.      */
//  BLE_GAP_EVT_TIMEOUT                     = BLE_GAP_EVT_BASE + 11,  /**< Timeout expired.                                \n See @ref ble_gap_evt_timeout_t.              */
//  BLE_GAP_EVT_RSSI_CHANGED                = BLE_GAP_EVT_BASE + 12,  /**< RSSI report.                                    \n See @ref ble_gap_evt_rssi_changed_t.         */
//  BLE_GAP_EVT_ADV_REPORT                  = BLE_GAP_EVT_BASE + 13,  /**< Advertising report.                             \n See @ref ble_gap_evt_adv_report_t.           */
//  BLE_GAP_EVT_SEC_REQUEST                 = BLE_GAP_EVT_BASE + 14,  /**< Security Request.                               \n See @ref ble_gap_evt_sec_request_t.          */
//  BLE_GAP_EVT_CONN_PARAM_UPDATE_REQUEST   = BLE_GAP_EVT_BASE + 15,  /**< Connection Parameter Update Request.            \n Reply with @ref sd_ble_gap_conn_param_update. \n See @ref ble_gap_evt_conn_param_update_request_t. */
//  BLE_GAP_EVT_SCAN_REQ_REPORT             = BLE_GAP_EVT_BASE + 16,  /**< Scan request report.                            \n See @ref ble_gap_evt_scan_req_report_t. */
//  BLE_GAP_EVT_PHY_UPDATE_REQUEST          = BLE_GAP_EVT_BASE + 17,  /**< PHY Update Request.                             \n Reply with @ref sd_ble_gap_phy_update. \n See @ref ble_gap_evt_phy_update_request_t. */
//  BLE_GAP_EVT_PHY_UPDATE                  = BLE_GAP_EVT_BASE + 18,  /**< PHY Update Procedure is complete.               \n See @ref ble_gap_evt_phy_update_t.           */
//  BLE_GAP_EVT_DATA_LENGTH_UPDATE_REQUEST = BLE_GAP_EVT_BASE + 19,   /**< Data Length Update Request.                     \n Reply with @ref sd_ble_gap_data_length_update. \n See @ref ble_gap_evt_data_length_update_request_t. */
//  BLE_GAP_EVT_DATA_LENGTH_UPDATE         = BLE_GAP_EVT_BASE + 20,   /**< LL Data Channel PDU payload length updated.     \n See @ref ble_gap_evt_data_length_update_t. */
//  BLE_GAP_EVT_QOS_CHANNEL_SURVEY_REPORT  = BLE_GAP_EVT_BASE + 21,   /**< Channel survey report.                          \n See @ref ble_gap_evt_qos_channel_survey_report_t. */
//  BLE_GAP_EVT_ADV_SET_TERMINATED         = BLE_GAP_EVT_BASE + 22,   /**< Advertising set terminated.                     \n See @ref ble_gap_evt_adv_set_terminated_t. */
// 38

///**
// * @brief GATT Client Event IDs.
// base  0x30
// */
//enum BLE_GATTC_EVTS
//{
//    BLE_GATTC_EVT_PRIM_SRVC_DISC_RSP = BLE_GATTC_EVT_BASE,  /**< Primary Service Discovery Response event.          \n See @ref ble_gattc_evt_prim_srvc_disc_rsp_t.          */
//    BLE_GATTC_EVT_REL_DISC_RSP,                             /**< Relationship Discovery Response event.             \n See @ref ble_gattc_evt_rel_disc_rsp_t.                */
//    BLE_GATTC_EVT_CHAR_DISC_RSP,                            /**< Characteristic Discovery Response event.           \n See @ref ble_gattc_evt_char_disc_rsp_t.               */
//    BLE_GATTC_EVT_DESC_DISC_RSP,                            /**< Descriptor Discovery Response event.               \n See @ref ble_gattc_evt_desc_disc_rsp_t.               */
//    BLE_GATTC_EVT_ATTR_INFO_DISC_RSP,                       /**< Attribute Information Response event.              \n See @ref ble_gattc_evt_attr_info_disc_rsp_t. */
//    BLE_GATTC_EVT_CHAR_VAL_BY_UUID_READ_RSP,                /**< Read By UUID Response event.                       \n See @ref ble_gattc_evt_char_val_by_uuid_read_rsp_t.   */
//    BLE_GATTC_EVT_READ_RSP,                                 /**< Read Response event.                               \n See @ref ble_gattc_evt_read_rsp_t.                    */
//    BLE_GATTC_EVT_CHAR_VALS_READ_RSP,                       /**< Read multiple Response event.                      \n See @ref ble_gattc_evt_char_vals_read_rsp_t.          */
//    BLE_GATTC_EVT_WRITE_RSP,                                /**< Write Response event.                              \n See @ref ble_gattc_evt_write_rsp_t.                   */
//    BLE_GATTC_EVT_HVX,                                      /**< Handle Value Notification or Indication event.     \n Confirm indication with @ref sd_ble_gattc_hv_confirm.  \n See @ref ble_gattc_evt_hvx_t. */
//    BLE_GATTC_EVT_EXCHANGE_MTU_RSP,                         /**< Exchange MTU Response event.                       \n See @ref ble_gattc_evt_exchange_mtu_rsp_t.            */
//    BLE_GATTC_EVT_TIMEOUT,                                  /**< Timeout event.                                     \n See @ref ble_gattc_evt_timeout_t.                     */
//    BLE_GATTC_EVT_WRITE_CMD_TX_COMPLETE                     /**< Write without Response transmission complete.      \n See @ref ble_gattc_evt_write_cmd_tx_complete_t.       */
//};
